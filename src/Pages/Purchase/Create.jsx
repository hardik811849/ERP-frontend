import React, { useEffect, useState } from "react";
import {
  Button,
  Flex,
  FormControl,
  FormLabel,
  Grid,
  Input,
  Stack,
  Text,
  Textarea,
  useToast,
} from "@chakra-ui/react";
import { useDispatch } from "react-redux";
import { Link } from "react-router-dom";
import axios from "axios";
import { create_purchase } from "../../Redux/purchase/action";
import { v4 as uuidv4 } from "uuid";

const CreatePurchase = ({ onClose }) => {
  const dispatch = useDispatch();
  const toast = useToast();

  const [purchaseForm, setPurchaseForm] = useState({
    serial_no: "",
    date: "",
    indent_no: "",
    purchase_order_no: "",
    vender_details: "",
    delivery_date: "",
    payment_terms: "",
    store: "",
    item_id: "",
    item_details: "",
    hsn_code: "",
    quantity: "",
    unit: "",
    unit_price: "",
    tax_details: "",
    price_before_tax: "",
    total_price: "",
    terms_and_conditions: "",
    comments: "",
    attachments: null,
  });

  const handleChange = (e) => {
    const { id, value } = e.target;
    setPurchaseForm((prevForm) => ({
      ...prevForm,
      [id]: value,
    }));
  };

  const handleFileChange = (e) => {
    const { id, files } = e.target;
    setPurchaseForm((prevForm) => ({
      ...prevForm,
      [id]: files[0],
    }));
  };

  useEffect(() => {
    const autoGeneratedValues = {
      serial_no: "001",
      date: new Date().toISOString().split("T")[0],
      indent_no: `IND-${uuidv4().slice(0, 8)}`,
      purchase_order_no: `PO-${uuidv4().slice(0, 8)}`,
      item_id: `ITEM-${uuidv4().slice(0, 8)}`,
      hsn_code: "HSN12345",
      unit: "pcs",
      unit_price: "100",
      tax_details: "GST 18%",
      price_before_tax: "1000",
      total_price: "1180",
      terms_and_conditions: "Standard terms and conditions apply.",
    };
    setPurchaseForm((prevForm) => ({
      ...prevForm,
      ...autoGeneratedValues,
    }));
  }, []);

  const uploadToCloudinary = async (file) => {
    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "dhvexfsd");
    formData.append("cloud_name", "df6bctdlx");

    try {
      const response = await axios.post(
        "https://api.cloudinary.com/v1_1/df6bctdlx/image/upload",
        formData
      );
      return response.data.secure_url;
    } catch (error) {
      throw new Error("Failed to upload file to Cloudinary");
    }
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();

    try {
      const attachmentUrl = await uploadToCloudinary(purchaseForm.attachments);

      const formData = {
        ...purchaseForm,
        attachments: attachmentUrl,
      };

      dispatch(create_purchase(formData));
      onClose();
      toast({
        title: "Purchase Created.",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error("Failed to create purchase:", error.message);
      toast({
        title: "Failed to create purchase.",
        description: error.message,
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };

  return (
    <Stack alignItems={"center"} justifyContent={"center"}>
      <Text as={"h2"} fontSize={"xl"} fontWeight={"bold"}>
        Purchase Create
      </Text>
      <Stack gap={4} mt={12}>
        <form onSubmit={handleFormSubmit}>
          <Grid gridTemplateColumns={"repeat(3,1fr)"} gap={4}>
            <FormControl>
              <FormLabel>Sr. No.</FormLabel>
              <Input
                type="text"
                placeholder="Sr. No."
                id="serial_no"
                value={purchaseForm.serial_no}
                readOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Date</FormLabel>
              <Input
                type="date"
                placeholder="Date"
                id="date"
                value={purchaseForm.date}
                readOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Indent No.</FormLabel>
              <Input
                type="text"
                placeholder="Indent No."
                id="indent_no"
                value={purchaseForm.indent_no}
                readOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Purchase Order No.</FormLabel>
              <Input
                type="text"
                placeholder="Purchase Order No."
                id="purchase_order_no"
                value={purchaseForm.purchase_order_no}
                readOnly
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Vender Details</FormLabel>
              <Input
                type="text"
                placeholder="Vender Details"
                id="vender_details"
                onChange={handleChange}
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Delivery Date</FormLabel>
              <Input
                type="date"
                placeholder="Delivery Date"
                id="delivery_date"
                onChange={handleChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Payment Terms</FormLabel>
              <Input
                type="text"
                placeholder="Payment Terms"
                id="payment_terms"
                onChange={handleChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Store</FormLabel>
              <Input
                type="text"
                placeholder="Store"
                id="store"
                onChange={handleChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Item Id</FormLabel>
              <Input
                type="text"
                placeholder="Item Id"
                id="item_id"
                value={purchaseForm.item_id}
                readOnly
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Item Details</FormLabel>
              <Input
                type="text"
                placeholder="Item Details"
                id="item_details"
                onChange={handleChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>HSN Code</FormLabel>
              <Input
                type="text"
                placeholder="HSN Code"
                id="hsn_code"
                value={purchaseForm.hsn_code}
                readOnly
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Quantity</FormLabel>
              <Input
                type="number"
                placeholder="Quantity"
                id="quantity"
                onChange={handleChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Unit</FormLabel>
              <Input
                type="number"
                placeholder="Unit"
                id="unit"
                value={purchaseForm.unit}
                readOnly
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Unit Price</FormLabel>
              <Input
                type="number"
                placeholder="Unit Price"
                id="unit_price"
                value={purchaseForm.unit_price}
                readOnly
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Tax Details</FormLabel>
              <Input
                type="text"
                placeholder="Tax Details"
                id="tax_details"
                value={purchaseForm.tax_details}
                readOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Price before Tax</FormLabel>
              <Input
                type="number"
                placeholder="Price before Tax"
                id="price_before_tax"
                value={purchaseForm.price_before_tax}
                readOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Total Price</FormLabel>
              <Input
                type="number"
                placeholder="Total Price"
                id="total_price"
                value={purchaseForm.total_price}
                readOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Terms and Conditions</FormLabel>
              <Input
                type="text"
                placeholder="Terms and Conditions"
                id="terms_and_conditions"
                value={purchaseForm.terms_and_conditions}
                readOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Comments</FormLabel>
              <Textarea
                placeholder="Enter your comments"
                id="comments"
                onChange={handleChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Attachment</FormLabel>
              <Input
                type="file"
                id="attachments"
                onChange={handleFileChange}
                accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png"
              />
            </FormControl>
            <Flex gap={2}>
              <Button
                as={Link}
                to="/purchase"
                w={"fit-content"}
                variant={"outline"}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                bg={"#319AF6"}
                color={"white"}
                w={"fit-content"}
              >
                Submit
              </Button>
            </Flex>
          </Grid>
        </form>
      </Stack>
    </Stack>
  );
};

export default CreatePurchase;
