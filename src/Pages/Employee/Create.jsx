import React, { useEffect, useState } from "react";
import {
  Button,
  Flex,
  FormControl,
  FormLabel,
  Grid,
  Input,
  Select,
  Stack,
  Text,
  useToast,
} from "@chakra-ui/react";
import { useDispatch } from "react-redux";
import { Link } from "react-router-dom";
import Layout from "../../Components/Layout";
import { create_employee } from "../../Redux/employee/action";
import useHandler from "../../hooks/useHandler";
import axios from "axios";

const CreateEmployee = ({ onClose }) => {
  const dispatch = useDispatch();
  const toast = useToast();
  const { handleRes, handleError } = useHandler();

  const [employeeForm, setEmployeeForm] = useState({
    serial_no: "",
    date: "",
    employee_id: "",
    employee_name: "",
    address: "",
    pincode: "",
    state: "",
    country: "",
    mobile_number: "",
    email_id: "",
    department: "",
    id_proof: null,
    address_proof: null,
    photo: null,
    status: "",
  });

  const handleChange = (e) => {
    const { id, value } = e.target;
    setEmployeeForm((prevForm) => ({
      ...prevForm,
      [id]: value,
    }));
  };

  const handleFileChange = (e) => {
    const { id, files } = e.target;
    setEmployeeForm((prevForm) => ({
      ...prevForm,
      [id]: files[0],
    }));
  };

  useEffect(() => {
    const autoGeneratedValues = {
      serial_no: "001",
      date: new Date().toISOString().split("T")[0],
      employee_id: "001",
      state: "Your State",
      country: "Your Country",
    };

    setEmployeeForm((prevForm) => ({
      ...prevForm,
      ...autoGeneratedValues,
    }));
  }, []);

  const uploadToCloudinary = async (file) => {
    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "dhvexfsd");
    formData.append("cloud_name", "df6bctdlx");

    try {
      const response = await axios.post(
        "https://api.cloudinary.com/v1_1/df6bctdlx/image/upload",
        formData
      );
      return response.data.secure_url;
    } catch (error) {
      throw new Error("Failed to upload image to Cloudinary");
    }
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();

    try {
      const idProofUrl = await uploadToCloudinary(employeeForm.id_proof);
      const addressProofUrl = await uploadToCloudinary(
        employeeForm.address_proof
      );
      const photoUrl = await uploadToCloudinary(employeeForm.photo);

      const formData = {
        ...employeeForm,
        id_proof: idProofUrl,
        address_proof: addressProofUrl,
        photo: photoUrl,
      };

      console.log(formData);

      dispatch(create_employee(formData));
      toast({
        title: "Employee Created.",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error("Failed to create employee:", error);
      toast({
        title: "Failed to create employee.",
        description: error.message,
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };

  return (
    <Stack alignItems={"center"} justifyContent={"center"}>
      <Text as={"h2"} fontSize={"xl"} fontWeight={"bold"}>
        Employee Create
      </Text>
      <Stack gap={4} mt={12}>
        <form onSubmit={handleFormSubmit}>
          <Grid gridTemplateColumns={"repeat(3,1fr)"} gap={4}>
            <FormControl>
              <FormLabel>Sr. No.</FormLabel>
              <Input
                type="text"
                placeholder="Sr. No."
                id="serial_no"
                value={employeeForm.serial_no}
                onChange={handleChange}
                isReadOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Date</FormLabel>
              <Input
                type="date"
                placeholder="Date"
                id="date"
                value={employeeForm.date}
                onChange={handleChange}
                isReadOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Employee Id</FormLabel>
              <Input
                type="text"
                placeholder="Employee Id"
                id="employee_id"
                value={employeeForm.employee_id}
                onChange={handleChange}
                isReadOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Name</FormLabel>
              <Input
                type="text"
                placeholder="Employee Name"
                id="employee_name"
                value={employeeForm.employee_name}
                onChange={handleChange}
                isRequired
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Address</FormLabel>
              <Input
                type="text"
                placeholder="Employee Address"
                id="address"
                value={employeeForm.address}
                onChange={handleChange}
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Pincode</FormLabel>
              <Input
                type="number"
                placeholder="Pincode"
                id="pincode"
                value={employeeForm.pincode}
                onChange={handleChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>State</FormLabel>
              <Input
                type="text"
                placeholder="State"
                id="state"
                value={employeeForm.state}
                onChange={handleChange}
                isReadOnly
              />
            </FormControl>
            <FormControl>
              <FormLabel>Country</FormLabel>
              <Input
                type="text"
                placeholder="Country"
                id="country"
                value={employeeForm.country}
                onChange={handleChange}
                isReadOnly
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Contact No</FormLabel>
              <Input
                type="number"
                placeholder="Contact No."
                id="mobile_number"
                value={employeeForm.mobile_number}
                onChange={handleChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Email Id</FormLabel>
              <Input
                type="email"
                placeholder="Email Address"
                id="email_id"
                value={employeeForm.email_id}
                onChange={handleChange}
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Department</FormLabel>
              <Select
                id="department"
                value={employeeForm.department}
                onChange={handleChange}
              >
                <option value="">Select Department</option>
                <option value="Account">Account</option>
                <option value="Marketing">Marketing</option>
                <option value="Production">Production</option>
                <option value="Dispatch">Dispatch</option>
                <option value="Sales">Sales</option>
                <option value="Purchase">Purchase</option>
                <option value="R&D">R&D</option>
                <option value="HR">HR</option>
              </Select>
            </FormControl>
            <FormControl isRequired>
              <FormLabel>ID Proof</FormLabel>
              <Input type="file" id="id_proof" onChange={handleFileChange} />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Address Proof</FormLabel>
              <Input
                type="file"
                id="address_proof"
                onChange={handleFileChange}
              />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>PhotoGraphs</FormLabel>
              <Input type="file" id="photo" onChange={handleFileChange} />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Status</FormLabel>
              <Select
                id="status"
                value={employeeForm.status}
                onChange={handleChange}
              >
                <option value="">Select Status</option>
                <option value="Working">Working</option>
                <option value="Resign">Resign</option>
              </Select>
            </FormControl>
            <Flex gap={2}>
              <Button
                as={Link}
                to="/employee"
                w={"fit-content"}
                variant={"outline"}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                bg={"#319AF6"}
                color={"white"}
                w={"fit-content"}
              >
                Submit
              </Button>
            </Flex>
          </Grid>
        </form>
      </Stack>
    </Stack>
  );
};

export default CreateEmployee;
